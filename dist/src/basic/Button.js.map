{"version":3,"sources":["../../../src/basic/Button.js"],"names":["Button","borderedBtn","borderWidth","props","bordered","undefined","borderRadius","rounded","variable","borderRadiusLarge","defaultProps","style","getInitialStyle","variables","context","theme","Platform","OS","androidRipple","prepareRootProps","_root","c","activeOpacity","children","React","Children","map","child","type","Text","cloneElement","uppercase","btnUppercaseAndroidText","onPress","androidRippleColor","TouchableNativeFeedback","Ripple","Component","contextTypes","PropTypes","object","propTypes","TouchableOpacity","oneOfType","number","array","block","bool","primary","transparent","success","danger","warning","info","disabled","large","small","active","StyledButton","mapPropsToStyleNames"],"mappings":"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","file":"Button.js","sourcesContent":["import React, { Component } from \"react\";\nimport PropTypes from \"prop-types\";\nimport { TouchableOpacity, Platform, View, TouchableNativeFeedback } from \"react-native\";\nimport { connectStyle } from \"native-base-shoutem-theme\";\nimport variable from \"./../theme/variables/platform\";\nimport { Text } from \"./Text\";\nimport computeProps from \"../Utils/computeProps\";\n\nimport mapPropsToStyleNames from \"../Utils/mapPropsToStyleNames\";\n\nclass Button extends Component {\n\n\tstatic contextTypes = {\n\t\ttheme: PropTypes.object,\n\t};\n\n\tgetInitialStyle() {\n\t\treturn {\n\t\t\tborderedBtn: {\n\t\t\t\tborderWidth: this.props.bordered ? 1 : undefined,\n\t\t\t\tborderRadius: this.props.rounded && this.props.bordered ? variable.borderRadiusLarge : 2,\n\t\t\t},\n\t\t};\n\t}\n\n\t_root: React$Element<TouchableOpacity | TouchableNativeFeedback>;\n\n\tprepareRootProps() {\n\t\tconst defaultProps = {\n\t\t\tstyle: this.getInitialStyle().borderedBtn,\n\t\t};\n\n\t\treturn computeProps(this.props, defaultProps);\n\t}\n\trender() {\n\t\tconst variables = this.context.theme ? this.context.theme[\"@@shoutem.theme/themeStyle\"].variables : variable;\n\t\tif (Platform.OS !== \"android\" || variables.androidRipple === false || Platform[\"Version\"] <= 21) {\n\t\t\treturn (\n\t\t\t\t<TouchableOpacity\n\t\t\t\t\t{...this.prepareRootProps()}\n\t\t\t\t\tref={c => (this._root = c)}\n\t\t\t\t\tactiveOpacity={this.props.activeOpacity > 0 ? this.props.activeOpacity : 0.5}\n\t\t\t\t>\n\t\t\t\t\t{this.props.children}\n\t\t\t\t</TouchableOpacity>\n\t\t\t);\n\t\t} else {\n      const children = React.Children.map(\n        this.props.children,\n        child =>\n          child && child.type === Text\n            ? React.cloneElement(child, { uppercase: variables.btnUppercaseAndroidText, ...child.props })\n            : child\n      )\n\t\t\treturn (\n\t\t\t\t<TouchableNativeFeedback\n\t\t\t\t\tref={c => (this._root = c)}\n\t\t\t\t\tonPress={this.props.onPress}\n\t\t\t\t\tbackground={\n\t\t\t\t\t\tthis.props.androidRippleColor\n\t\t\t\t\t\t\t? TouchableNativeFeedback.Ripple(this.props.androidRippleColor)\n\t\t\t\t\t\t\t: TouchableNativeFeedback.Ripple(variables.androidRippleColor)\n\t\t\t\t\t}\n\t\t\t\t\t{...this.prepareRootProps()}\n\t\t\t\t>\n\t\t\t\t\t<View {...this.prepareRootProps()}>\n\t\t\t\t\t\t{children}\n\t\t\t\t\t</View>\n\t\t\t\t</TouchableNativeFeedback>\n\t\t\t);\n\t\t}\n\t}\n}\n\nButton.propTypes = {\n\t...TouchableOpacity.propTypes,\n\tstyle: PropTypes.oneOfType([PropTypes.object, PropTypes.number, PropTypes.array]),\n\tblock: PropTypes.bool,\n\tprimary: PropTypes.bool,\n\ttransparent: PropTypes.bool,\n\tsuccess: PropTypes.bool,\n\tdanger: PropTypes.bool,\n\twarning: PropTypes.bool,\n\tinfo: PropTypes.bool,\n\tbordered: PropTypes.bool,\n\tdisabled: PropTypes.bool,\n\trounded: PropTypes.bool,\n\tlarge: PropTypes.bool,\n\tsmall: PropTypes.bool,\n\tactive: PropTypes.bool,\n};\n\nconst StyledButton = connectStyle(\"NativeBase.Button\", {}, mapPropsToStyleNames)(Button);\nexport { StyledButton as Button };\n"]}